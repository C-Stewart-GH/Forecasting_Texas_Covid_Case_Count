library(RCurl)
library(tswge)
library(tidyverse)
library(lubridate)
library(tseries)
#Can also be used to find valleys if you put -x in instead of x for realization
find_peaks <- function (x, m = 3){
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), FUN = function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
pks <- unlist(pks)
pks
}
find_valleys <- function (x, m = 3){
x=-x
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), FUN = function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
pks <- unlist(pks)
pks
}
Rolling_Window_ASE = function(series, trainingSize, horizon = 1, s = 0, d = 0, phis = 0, thetas = 0)
{
ASEHolder = numeric()
for( i in 1:(length(series)-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(series[i:(i+(trainingSize-1))],phi = phis, theta = thetas, s = s, d = d,n.ahead = horizon)
ASE = mean((series[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder[i] = ASE
}
ASEHolder
hist(ASEHolder)
WindowedASE = mean(ASEHolder)
print("The Summary Statistics for the Rolling Window ASE Are:")
print(summary(ASEHolder))
print(paste("The Rolling Window ASE is: ",WindowedASE))
return(WindowedASE)
}
covid <- read.csv(text=getURL("https://raw.githubusercontent.com/C-Stewart-GH/Time_Series_Project/main/Raw_Data_Files/merged_data.csv"))
covid$Date=mdy(covid$Date)
str(covid)
summary(covid)
cases=cases=read.csv(text=getURL("https://raw.githubusercontent.com/C-Stewart-GH/Time_Series_Project/main/Raw_Data_Files/Texas%20COVID-19%20Case%20Count%20Data%20by%20County.csv"))
cases$Date=mdy(cases$Date)
cases$Case.Count=c(NA,diff(cases$Case.Count))
cases=cases[2:length(cases$Date),]
str(cases)
library(RCurl)
library(tswge)
library(tidyverse)
library(lubridate)
library(tseries)
#Can also be used to find valleys if you put -x in instead of x for realization
find_peaks <- function (x, m = 3){
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), FUN = function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
pks <- unlist(pks)
pks
}
find_valleys <- function (x, m = 3){
x=-x
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), FUN = function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
pks <- unlist(pks)
pks
}
Rolling_Window_ASE = function(series, trainingSize, horizon = 1, s = 0, d = 0, phis = 0, thetas = 0)
{
ASEHolder = numeric()
for( i in 1:(length(series)-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(series[i:(i+(trainingSize-1))],phi = phis, theta = thetas, s = s, d = d,n.ahead = horizon)
ASE = mean((series[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder[i] = ASE
}
ASEHolder
hist(ASEHolder)
WindowedASE = mean(ASEHolder)
print("The Summary Statistics for the Rolling Window ASE Are:")
print(summary(ASEHolder))
print(paste("The Rolling Window ASE is: ",WindowedASE))
return(WindowedASE)
}
covid <- read.csv(text=getURL("https://raw.githubusercontent.com/C-Stewart-GH/Time_Series_Project/main/Raw_Data_Files/merged_data.csv"))
covid$Date=mdy(covid$Date)
str(covid)
summary(covid)
cases=cases=read.csv(text=getURL("https://raw.githubusercontent.com/C-Stewart-GH/Time_Series_Project/main/Raw_Data_Files/Texas%20COVID-19%20Case%20Count%20Data%20by%20County.csv"))
cases$Date=mdy(cases$Date)
cases$Case.Count=c(NA,diff(cases$Case.Count))
cases=cases[2:length(cases$Date),]
str(cases)
covid <- read.csv(file.choose(), header = FALSE, sep = ";")
#read.csv(text=getURL("https://raw.githubusercontent.com/C-Stewart-GH/Time_Series_Project/main/Raw_Data_Files/merged_data.csv"))
covid$Date=mdy(covid$Date)
str(covid)
summary(covid)
cases= read.csv(file.choose(), header = FALSE, sep = ";")
#read.csv(text=getURL("https://raw.githubusercontent.com/C-Stewart-GH/Time_Series_Project/main/Raw_Data_Files/Texas%20COVID-19%20Case%20Count%20Data%20by%20County.csv"))
cases$Date=mdy(cases$Date)
cases$Case.Count=c(NA,diff(cases$Case.Count))
cases=cases[2:length(cases$Date),]
str(cases)
plotts.sample.wge(covid$case_count,lag.max = 100,trunc = 35)
View(covid)
covid <- read.csv(file.choose(), header = FALSE, sep = ",")
#read.csv(text=getURL("https://raw.githubusercontent.com/C-Stewart-GH/Time_Series_Project/main/Raw_Data_Files/merged_data.csv"))
covid$Date=mdy(covid$Date)
str(covid)
summary(covid)
cases= read.csv(file.choose(), header = FALSE, sep = ",")
#read.csv(text=getURL("https://raw.githubusercontent.com/C-Stewart-GH/Time_Series_Project/main/Raw_Data_Files/Texas%20COVID-19%20Case%20Count%20Data%20by%20County.csv"))
cases$Date=mdy(cases$Date)
cases$Case.Count=c(NA,diff(cases$Case.Count))
cases=cases[2:length(cases$Date),]
str(cases)
View(covid)
covid <- read.csv(file.choose(), header = TRUE, sep = ",")
#read.csv(text=getURL("https://raw.githubusercontent.com/C-Stewart-GH/Time_Series_Project/main/Raw_Data_Files/merged_data.csv"))
covid$Date=mdy(covid$Date)
str(covid)
summary(covid)
cases= read.csv(file.choose(), header = TRUE, sep = ",")
#read.csv(text=getURL("https://raw.githubusercontent.com/C-Stewart-GH/Time_Series_Project/main/Raw_Data_Files/Texas%20COVID-19%20Case%20Count%20Data%20by%20County.csv"))
cases$Date=mdy(cases$Date)
cases$Case.Count=c(NA,diff(cases$Case.Count))
cases=cases[2:length(cases$Date),]
str(cases)
covid <- read.csv(file.choose(), header = TRUE, sep = ",")
#read.csv(text=getURL("https://raw.githubusercontent.com/C-Stewart-GH/Time_Series_Project/main/Raw_Data_Files/merged_data.csv"))
covid$Date=mdy(covid$Date)
str(covid)
summary(covid)
cases= read.csv(file.choose(), header = TRUE, sep = ",")
#read.csv(text=getURL("https://raw.githubusercontent.com/C-Stewart-GH/Time_Series_Project/main/Raw_Data_Files/Texas%20COVID-19%20Case%20Count%20Data%20by%20County.csv"))
cases$Date=mdy(cases$Date)
cases$Case.Count=c(NA,diff(cases$Case.Count))
cases=cases[2:length(cases$Date),]
str(cases)
plotts.sample.wge(covid$case_count,lag.max = 100,trunc = 35)
plotts.sample.wge(cases$Case.Count,lag.max = 40,trunc = 35)
acf(cases$Case.Count[1:(length(cases$Case.Count)/2)],lag.max = 40)
acf(cases$Case.Count[(length(cases$Case.Count)/2+1):length(cases$Case.Count)],lag.max = 40)
acf(covid$case_count[1:(length(covid$case_count)/2)],lag.max = 60)
acf(covid$case_count[(length(covid$case_count)/2+1):length(covid$case_count)],lag.max = 60)
acf(cases$Case.Count,lag.max = 60)
pacf(cases$Case.Count,lag.max = 60)
aic5.wge(cases$Case.Count,p = 0:33,q = 0:2)
aic5.wge(cases$Case.Count,p = 0:33,q = 0:10)
aic5.wge(cases$Case.Count,p = 0:33,q = 0:10)
cases
merged_data <- read.csv("C:/Users/geeki/OneDrive/___SMU/GITHUB/repositories/Time_Series_Project_2/Raw_Data_Files/merged_data.csv")
View(merged_data)
merged = read.csv(file.choose(), header = TRUE, sep = ",")
plot(merged_data$, type = "l", col="Red")
plot(merged_data$case_count, type = "l")
plot(merged_data$tests_taken, type = "l", col="Red")
plot(merged_data$vaccine_doses_administered, type = "l", col="Blue")
plot(merged_data$case_count, type = "l")
plot(merged_data$tests_taken, type = "l", col="Red")
plot(merged_data$vaccine_doses_administered, type = "l", col="Blue")
plot(merged_data$case_count, type = "l")
plot(merged_data$tests_taken, type = "l", col="Red")
plot(merged_data$vaccine_doses_administered, type = "l", col="Blue")
ggpairs(merged_data[2:4]) #matrix of scatter plots
ggpairs(merged_data[2:4]) #matrix of scatter plots
library(ggpairs)
library("ggpairs")
testD <- merged_data('Date','case_count','tests_taken', 'vaccine_doses_adminitered')
testD <- merged_data['Date','case_count','tests_taken', 'vaccine_doses_adminitered']
testD <- merged_data[,c('Date','case_count','tests_taken', 'vaccine_doses_adminitered')]
testD <- merged_data[,c('Date','case_count','tests_taken', 'vaccine_doses_administered')]
mergedD <- merged_data[,c('Date','case_count','tests_taken', 'vaccine_doses_administered')]
plot(mergedD$case_count, type = "l")
ggpairs(mergedD[2:4]) #matrix of scatter plots
library(vars)
ggpairs(mergedD[2:4]) #matrix of scatter plots
library(vars)
ggpairs(mergedD[2:4]) #matrix of scatter plots
library(ggpairs)
a <- mergedD$case_count
b <- mergedD$tests_taken
a <- mergedD$case_count[1:332]
b <- mergedD$tests_taken[1:332]
actuals <- mergedD$case_count[333:416]
ccf(a,b)
ccf(b,a)
covid <- read.csv(file.choose(), header = TRUE, sep = ",")
#read.csv(text=getURL("https://raw.githubusercontent.com/C-Stewart-GH/Time_Series_Project/main/Raw_Data_Files/merged_data.csv"))
covid$Date=mdy(covid$Date)
str(covid)
summary(covid)
cases= read.csv(file.choose(), header = TRUE, sep = ",")
#read.csv(text=getURL("https://raw.githubusercontent.com/C-Stewart-GH/Time_Series_Project/main/Raw_Data_Files/Texas%20COVID-19%20Case%20Count%20Data%20by%20County.csv"))
cases$Date=mdy(cases$Date)
cases$Case.Count=c(NA,diff(cases$Case.Count))
cases=cases[2:length(cases$Date),]
str(cases)
# Chunk 1
library(RCurl)
library(tswge)
library(tidyverse)
library(lubridate)
library(tseries)
# Chunk 2
#Can also be used to find valleys if you put -x in instead of x for realization
find_peaks <- function (x, m = 3){
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), FUN = function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
pks <- unlist(pks)
pks
}
# Chunk 3
find_valleys <- function (x, m = 3){
x=-x
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), FUN = function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
pks <- unlist(pks)
pks
}
# Chunk 4
Rolling_Window_ASE = function(series, trainingSize, horizon = 1, s = 0, d = 0, phis = 0, thetas = 0)
{
ASEHolder = numeric()
for( i in 1:(length(series)-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(series[i:(i+(trainingSize-1))],phi = phis, theta = thetas, s = s, d = d,n.ahead = horizon)
ASE = mean((series[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder[i] = ASE
}
ASEHolder
hist(ASEHolder)
WindowedASE = mean(ASEHolder)
print("The Summary Statistics for the Rolling Window ASE Are:")
print(summary(ASEHolder))
print(paste("The Rolling Window ASE is: ",WindowedASE))
return(WindowedASE)
}
# Chunk 1
library(RCurl)
library(tswge)
library(tidyverse)
library(lubridate)
library(tseries)
# Chunk 2
#Can also be used to find valleys if you put -x in instead of x for realization
find_peaks <- function (x, m = 3){
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), FUN = function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
pks <- unlist(pks)
pks
}
# Chunk 3
find_valleys <- function (x, m = 3){
x=-x
shape <- diff(sign(diff(x, na.pad = FALSE)))
pks <- sapply(which(shape < 0), FUN = function(i){
z <- i - m + 1
z <- ifelse(z > 0, z, 1)
w <- i + m + 1
w <- ifelse(w < length(x), w, length(x))
if(all(x[c(z : i, (i + 2) : w)] <= x[i + 1])) return(i + 1) else return(numeric(0))
})
pks <- unlist(pks)
pks
}
# Chunk 4
Rolling_Window_ASE = function(series, trainingSize, horizon = 1, s = 0, d = 0, phis = 0, thetas = 0)
{
ASEHolder = numeric()
for( i in 1:(length(series)-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(series[i:(i+(trainingSize-1))],phi = phis, theta = thetas, s = s, d = d,n.ahead = horizon)
ASE = mean((series[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder[i] = ASE
}
ASEHolder
hist(ASEHolder)
WindowedASE = mean(ASEHolder)
print("The Summary Statistics for the Rolling Window ASE Are:")
print(summary(ASEHolder))
print(paste("The Rolling Window ASE is: ",WindowedASE))
return(WindowedASE)
}
